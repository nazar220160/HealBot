import re
from SimpleQIWI import *
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import config
from create_bot import dp
from data_base import sqlite_db
from keyboards import kb_qiwi, qiwi_api, qiwi_number_i, qiwi_number_api
from aiogram import Dispatcher, types
from filters import MyFilter
import asyncio

dp.filters_factory.bind(MyFilter)
on_payments = False

async def start_qiwi(message: types.Message, state: FSMContext):
	await state.set_state('qiwi_on')
	await message.answer('–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª–∏—Å—å –≤ –∫–∏–≤–∏ –ø–∞–Ω–µ–ª—å', reply_markup=kb_qiwi)


# noinspection PyTypeChecker
async def start_qiwi_push(message: types.Message):
	global people_id
	global token
	people_id = message.from_user.id
	token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
	phone2 = sqlite_db.cursor.execute('SELECT number FROM database WHERE id == ?', (people_id,)).fetchone()
	if token[0] != '0' and phone2[0] != '0':
		try:
			if not on_payments:
				await in_payments(message)
			if on_payments:
				if not message.from_user.id in [id[0] for id in on_payments]:
					await in_payments(message)
				# noinspection PyTypeChecker
				if message.from_user.id in [id[0] for id in on_payments]:
					await message.answer('–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞')
		except:
			await message.answer('–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∏–ª–∏ –Ω–æ–º–µ—Ä–æ–º\n'
								 '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–≤–∏ –∏ API')
	if token[0] == '0' and phone2[0] != '0':
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç—É API –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ!', reply_markup=qiwi_api)
	if phone2[0] == '0' and token[0] != '0':
		await message.answer('–£ –≤–∞—Å –Ω–µ—Ç—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞', reply_markup=qiwi_number_i)
	if phone2[0] == '0' and token[0] == '0':
		await message.answer('–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–º–µ—Ä –∏ API', reply_markup=qiwi_number_api)

class FSMAdmin(StatesGroup):
	number_qiwi = State()
	comment_qiwi = State()
	summ_qiwi = State()

#–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏
async def send_money_qiwi(message: types.Message):
		global token
		global people_id
		people_id = message.from_user.id
		token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
		phone2 = sqlite_db.cursor.execute('SELECT number FROM database WHERE id == ?', (people_id,)).fetchone()
		api = QApi(token=token[0], phone=phone2)
		try:
			if message.chat.type == 'private':
				people_id = message.from_user.id
				token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
				if token[0] != '0':
					print(api.balance)
					await FSMAdmin.number_qiwi.set()
					await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥!', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')))
				if token[0] == '0':
					await message.answer('–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ç–æ–∫–µ–Ω', reply_markup=kb_qiwi)
			else:
				await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º @ItsHealBot')
		except requests.exceptions.JSONDecodeError:
			await message.answer('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π')
		except Errors.QIWIAPIError as e:
			if e.args[0]["errorCode"] == 'request.blocked':
				await message.answer('–û—à–∏–±–∫–∞: QIWIAPIError\n'
									 '–£ –≤–∞—Å –±—Ä–æ–∫–∏—Ä–æ–≤–∫–∞ API\n'
									 '–í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç', reply_markup=kb_qiwi)
			else:
				await message.answer('–û—à–∏–±–∫–∞: QIWIAPIError\n'
									 '–ö–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è', reply_markup=kb_qiwi)
				print(e)
		except:
			await message.answer('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º', reply_markup=kb_qiwi)

#–õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç 1
async def qiwi_number(message: types.Message, state: FSMContext):
	try:
		pattern = re.compile("^38\d{10}$")
		if pattern.search(message.text):
			async with state.proxy() as data:
				data['number_qiwi'] = message.text
			await FSMAdmin.next()
			await message.reply('–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')).add(KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')))
		else:
			await message.answer('–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')
	except:
		await message.answer('–û—à–∏–±–∫–∞')


#–õ–æ–≤–∏–º –æ—Ç–≤–µ—Ç 2
async def qiwi_comment(message: types.Message, state: FSMContext):
	async with state.proxy() as data:
		if message.text != '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
			data['comment_qiwi'] = message.text
		if message.text == '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
			data['comment_qiwi'] = ''
	await FSMAdmin.next()
	await message.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–µ—Ä–µ–≤–æ–¥–∞!', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')))


#–õ–æ–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ
async def qiwi_summ(message: types.Message, state: FSMContext):
	token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
	api = QApi(token=token[0], phone=config.phone)
	async with state.proxy() as data:
		data['summ_qiwi'] = message.text
	if int(message.text) <= api.balance[0]:
		await paying_qiwi(message, state)
		await state.finish()
		await state.set_state('qiwi_on')
	if int(message.text) >= api.balance[0]:
		await message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç\n'
							 f'–í–∞—à –±–∞–ª–∞–Ω—Å - {api.balance[0]}')


async def paying_qiwi(message, state):
	await state.set_state('qiwi_on')
	token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
	api = QApi(token=token[0], phone=config.phone)
	async with state.proxy() as data:
		global number_qiwi
		global summ_qiwi
		global comment_qiwi
		number_qiwi = data['number_qiwi']
		summ_qiwi = data['summ_qiwi']
		comment_qiwi = data['comment_qiwi']
		try:
			api.pay(account=number_qiwi, amount=summ_qiwi, comment=comment_qiwi)
			await output_payments(message)
		except Errors.QIWIAPIError as e:
			if e.args[0] == "errorCode" and e.args[0]["errorCode"] == 'request.blocked':
				await message.answer('–û—à–∏–±–∫–∞: QIWIAPIError\n'
									 '–£ –≤–∞—Å –±—Ä–æ–∫–∏—Ä–æ–≤–∫–∞ API\n'
									 '–í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç')
			if e.args[0]['code'] and e.args[0]['code'] == 'QWPRC-319':
				await message.answer('–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ –ø–ª–∞—Ç–µ–∂ —Å–∞–º–æ–º—É —Å–µ–±–µ!', reply_markup=kb_qiwi)
			else:
				await message.answer('–û—à–∏–±–∫–∞: QIWIAPIError\n'
									 '–ö–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è', reply_markup=kb_qiwi)
		except:
			await message.answer('–ö–∞–∫–∞—è-—Ç–æ –ø—Ä–æ–±–ª–µ–º–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ø–ª–∞—Ç–µ–∂–∫–∞', reply_markup=kb_qiwi)



async def output_payments(message: types.Message):
	await message.answer(f'‚¨áÔ∏è–ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç–µ–∂–µ‚¨áÔ∏è\n'
										  f'üî•–°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞ - {summ_qiwi}üî•\n'
										  f'üî•–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {number_qiwi}üî•\n'
										  f'üî•–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–π - {comment_qiwi}üî•\n', reply_markup=kb_qiwi)


async def balance_qiwi(message: types.Message):
	people_id = message.from_user.id
	token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
	api = QApi(token=token[0], phone=config.phone)
	if token[0] != '0':
		try:
			await message.answer(api.balance[0])
		except requests.exceptions.JSONDecodeError:
			await message.answer('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π')
		except Errors.QIWIAPIError as e:
			if e.args[0]["errorCode"] == 'request.blocked':
				await message.answer('–û—à–∏–±–∫–∞: QIWIAPIError\n'
									 '–£ –≤–∞—Å –±—Ä–æ–∫–∏—Ä–æ–≤–∫–∞ API\n'
									 '–í–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä—É—é—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç')
			else:
				await message.answer('–û—à–∏–±–∫–∞: QIWIAPIError\n'
									 '–ö–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è')
				print(e)
		except UnicodeEncodeError:
			await message.answer('–û—à–∏–±–∫–∞: UnicodeEncodeError\n'
								 '–í—ã –≤–≤–µ–ª–∏ API —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏\n'
								 f'–í–∞—à API —Å–µ–π—á–∞—Å - {token[0]}')
		except:
			await message.answer('–ù–µ–∏—Å–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
	else:
		await message.answer('–í—ã –Ω–µ –¥–æ–±–∞–≤–ª–∏ —Ç–æ–∫–µ–Ω')


class FSMNumber(StatesGroup):
	api_number = State()

async def set_number_start(message: types.Message):
	people_id = message.from_user.id
	number2 = sqlite_db.cursor.execute('SELECT number FROM database WHERE id == ?', (people_id,)).fetchone()
	await FSMNumber.api_number.set()
	your_number = f'üî∏–í–∞—à –Ω–æ–º–µ—Ä —Å–µ–π—á–∞—Å - <i>{number2[0]}</i>üî∏' if number2[0] != '0' else ''
	await message.answer(f'‚ùó–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b><a href="qiwi.com">–ö–ò–í–ò</a></b> –∫–æ—à–µ–ª—å–∫–∞‚ùó\n'
						 f'{your_number}', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')), parse_mode="HTML", disable_web_page_preview=True)


async def set_number_start_callback(callback: types.CallbackQuery):
	people_id = callback.from_user.id
	number2 = sqlite_db.cursor.execute('SELECT number FROM database WHERE id == ?', (people_id,)).fetchone()
	await FSMNumber.api_number.set()
	your_number = f'üî∏–í–∞—à –Ω–æ–º–µ—Ä —Å–µ–π—á–∞—Å - <i>{number2[0]}</i>üî∏' if number2[0] != '0' else ''
	await callback.message.delete()
	await callback.message.answer(f'‚ùó–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b><a href="qiwi.com">–ö–ò–í–ò</a></b> –∫–æ—à–µ–ª—å–∫–∞‚ùó\n'
						 f'{your_number}', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')), parse_mode="HTML", disable_web_page_preview=True)


async def set_number(message: types.Message, state: FSMContext):
	global number_text
	number_text = message.text
	global people_id
	people_id = message.from_user.id
	pattern = re.compile("^38\d{10}$")
	if pattern.search(message.text):
		await sqlite_db.update_number()
		await state.finish()
		number2 = sqlite_db.cursor.execute('SELECT number FROM database WHERE id == ?', (people_id,)).fetchone()
		await message.reply(f'–í–∞—à –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä - ‚Äù{number2[0]}‚Äù', reply_markup=kb_qiwi)
		await state.set_state('qiwi_on')
	else:
		await message.answer('–ù–æ–º–µ—Ä –≤–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω–æ!')


class FSMApi(StatesGroup):
	api_token = State()

async def set_api_start(message: types.Message):
	if message.chat.type == 'private':
		people_id = message.from_user.id
		token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
		await FSMApi.api_token.set()
		your_token = f'üî∏<i>{token[0]}</i>üî∏' if token[0] != '0' else ''
		await message.answer(f'‚ùó–í–≤–µ–¥–∏—Ç–µ <b><a href="qiwi.com/api">–¢–û–ö–ï–ù</a></b> –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞‚ùó\n'
							 f'{your_token}', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')), parse_mode="HTML", disable_web_page_preview=True)
	else:
		await message.answer('–ò–∑–º–µ–Ω—è—Ç—å API –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º - @ItsHealBot')


async def set_api_start_callback(callback: types.CallbackQuery):
	if callback.message.chat.type == 'private':
		await callback.message.delete()
		people_id = callback.from_user.id
		token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
		await FSMApi.api_token.set()
		your_token = f'üî∏<i>{token[0]}</i>üî∏' if token[0] != '0' else ''
		await callback.message.answer(f'‚ùó–í–≤–µ–¥–∏—Ç–µ <b><a href="qiwi.com/api">–¢–û–ö–ï–ù</a></b> –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞‚ùó\n'
							 f'{your_token}',
							 reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')),
							 parse_mode="HTML", disable_web_page_preview=True)


async def set_api(message: types.Message, state: FSMContext):
	global api_text
	api_text = message.text
	global people_id
	people_id = message.from_user.id
	api = QApi(token=api_text, phone=config.phone)
	try:
		balance = api.balance
		await sqlite_db.update_api()
		await state.finish()
		token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
		await message.reply(f'–í–∞—à –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω - ‚Äù{token[0]}‚Äù', reply_markup=kb_qiwi)
		await state.set_state('qiwi_on')
	except:
		await message.answer('–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π!')


async def in_payments(message):
	global on_payments
	global people_id
	global token
	people_id = message.from_user.id
	token = sqlite_db.cursor.execute('SELECT api FROM database WHERE id == ?', (people_id,)).fetchone()
	phone2 = sqlite_db.cursor.execute('SELECT number FROM database WHERE id == ?', (people_id,)).fetchone()
	api = QApi(token=token[0], phone=phone2)
	payment_data = api.payments
	if on_payments == False:
		on_payments = []
	if not message.from_user.id in [id[0] for id in on_payments]:
		on_payments.append(sqlite_db.cursor.execute('SELECT id FROM database WHERE id == ?', (people_id,)).fetchone())
	data_in = payment_data['data'][0]['date']
	print(f'{data_in} —Ü–∏–∫–ª –∑–∞–ø—É—â–µ–Ω')
	await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Ö–æ–¥—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–∞—Ö –∑–∞–ø—É—â–µ–Ω—ã')
	while True:
		try:
			payment_data = api.payments
			if payment_data['data'][0]['type'] == 'IN':
				new1 = payment_data['data'][0]['account']
				new2 = payment_data['data'][0]['sum']['amount']
				new3 = payment_data['data'][0]['date']
				print(data_in)
				if new3 != data_in:
					data_in = new3
					payment_data['data'][0]['account'] = new1
					payment_data['data'][0]['sum']['amount'] = new2
					print(new1, new2, new3)
					await message.answer(f'–ö –≤–∞–º –ø—Ä–∏—à–µ–ª –ø–ª–∞—Ç–µ–∂ –æ—Ç –Ω–æ–º–µ—Ä–∞ {new1} –∏ –Ω–∞ —Å—É–º–º—É {new2}')
			await asyncio.sleep(10)
		except:
			await message.answer('–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º')


async def previous_handler_number_qiwi(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	await FSMAdmin.previous()
	await state.set_state('qiwi_on')
	await message.answer('–û–ö', reply_markup=kb_qiwi)

async def previous_handler_comment_qiwi(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	await FSMAdmin.previous()
	await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –ø–µ—Ä–µ–≤–æ–¥!', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')))

async def previous_handler_summ_qiwi(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	await FSMAdmin.previous()
	await message.answer('–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω—Ç–∞—Ä–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É', reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton('–ù–∞–∑–∞–¥')).add(KeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å')))

async def previous_handler_set_api(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	await FSMApi.previous()
	await state.set_state('qiwi_on')
	await message.answer('–û–ö', reply_markup=kb_qiwi)

async def previous_handler_set_number(message: types.Message, state: FSMContext):
	current_state = await state.get_state()
	if current_state is None:
		return
	await FSMApi.previous()
	await state.set_state('qiwi_on')
	await message.answer('–û–ö', reply_markup=kb_qiwi)

def register_handlers_qiwi(dp : Dispatcher):
	dp.register_message_handler(start_qiwi, text=['–ö–∏–≤–∏'])
	dp.register_message_handler(start_qiwi_push, text=['–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'], state='qiwi_on')
	dp.register_message_handler(previous_handler_number_qiwi, state=FSMAdmin.number_qiwi, text=['–ù–∞–∑–∞–¥'])
	dp.register_message_handler(previous_handler_comment_qiwi, state=FSMAdmin.comment_qiwi, text=['–ù–∞–∑–∞–¥'])
	dp.register_message_handler(previous_handler_summ_qiwi, state=FSMAdmin.summ_qiwi, text=['–ù–∞–∑–∞–¥'])
	dp.register_message_handler(previous_handler_set_api, state=FSMApi.api_token, text=['–ù–∞–∑–∞–¥'])
	dp.register_message_handler(previous_handler_set_number, state=FSMNumber.api_number, text=['–ù–∞–∑–∞–¥'])
	dp.register_message_handler(send_money_qiwi, text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å', state='qiwi_on')
	dp.register_message_handler(qiwi_number, content_types=['text'], state=FSMAdmin.number_qiwi)
	dp.register_message_handler(qiwi_comment, state=FSMAdmin.comment_qiwi)
	dp.register_message_handler(qiwi_summ, state=FSMAdmin.summ_qiwi)
	dp.register_message_handler(balance_qiwi, text='–ë–∞–ª–∞–Ω—Å', state='qiwi_on')
	dp.register_message_handler(set_api_start, text='–ò–∑–º–µ–Ω–∏—Ç—å API', state='qiwi_on')
	dp.register_callback_query_handler(set_api_start_callback, text='add_api', state='qiwi_on')
	dp.register_message_handler(set_api, state=FSMApi.api_token)
	dp.register_message_handler(set_number_start, text='–ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä', state='qiwi_on')
	dp.register_callback_query_handler(set_number_start_callback, text='add_number', state='qiwi_on')
	dp.register_message_handler(set_number, state=FSMNumber.api_number)

